/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bizbuilder;

import java.awt.Color;
import static java.awt.Color.gray;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.regex.PatternSyntaxException;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author THANATOS
 */
public class adding_tab extends javax.swing.JFrame {

    /**
     * Creates new form adding_tab
     */
    public adding_tab() {
        initComponents();
        setss_table();
        setos_table();
        setose_table();
        setmet_table();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Profile = new rojerusan.RSFotoCircle();
        Employee = new javax.swing.JLabel();
        Dashboard = new javax.swing.JLabel();
        Monthly_Expenses = new javax.swing.JLabel();
        Customer = new javax.swing.JLabel();
        Adding = new javax.swing.JLabel();
        Logout = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        tabpane1 = new bizbuilder.Tabpane();
        jPanel2 = new javax.swing.JPanel();
        tabpane2 = new bizbuilder.Tabpane();
        jPanel5 = new javax.swing.JPanel();
        ss_txt_search = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ss_table = new javax.swing.JTable();
        ss_save_btn = new javax.swing.JButton();
        ss_delete_btn = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        os_txt_search = new javax.swing.JTextField();
        os_save_btn = new javax.swing.JButton();
        os_delete_btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        os_table = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        ose_txt_search = new javax.swing.JTextField();
        ose_save_btn = new javax.swing.JButton();
        ose_delete_btn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ose_table = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        met_txt_search = new javax.swing.JTextField();
        met_save_btn = new javax.swing.JButton();
        met_delete_btn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        met_table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1300, 650));
        setPreferredSize(new java.awt.Dimension(1300, 650));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));

        Employee.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Employee.setForeground(new java.awt.Color(255, 255, 255));
        Employee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/employee.png"))); // NOI18N
        Employee.setText("Employee");
        Employee.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Employee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EmployeeMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                EmployeeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                EmployeeMouseExited(evt);
            }
        });

        Dashboard.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Dashboard.setForeground(new java.awt.Color(255, 255, 255));
        Dashboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/dashboard.png"))); // NOI18N
        Dashboard.setText("Dashboard");
        Dashboard.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Dashboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DashboardMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DashboardMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                DashboardMouseExited(evt);
            }
        });

        Monthly_Expenses.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Monthly_Expenses.setForeground(new java.awt.Color(255, 255, 255));
        Monthly_Expenses.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/expense.png"))); // NOI18N
        Monthly_Expenses.setText("Monthly Expenses");
        Monthly_Expenses.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Monthly_Expenses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Monthly_ExpensesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Monthly_ExpensesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Monthly_ExpensesMouseExited(evt);
            }
        });

        Customer.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Customer.setForeground(new java.awt.Color(255, 255, 255));
        Customer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/user (1).png"))); // NOI18N
        Customer.setText("Customer");
        Customer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Customer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CustomerMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CustomerMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CustomerMouseExited(evt);
            }
        });

        Adding.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        Adding.setForeground(new java.awt.Color(255, 255, 255));
        Adding.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/add.png"))); // NOI18N
        Adding.setText("Adding");
        Adding.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Adding.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddingMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AddingMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AddingMouseExited(evt);
            }
        });

        Logout.setBackground(new java.awt.Color(102, 102, 255));
        Logout.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Logout.setForeground(new java.awt.Color(255, 255, 255));
        Logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/logout.png"))); // NOI18N
        Logout.setText("Logout");
        Logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Adding, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(Customer, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(Employee, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(Dashboard, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(Monthly_Expenses, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(Profile, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(Logout)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(Profile, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(Customer)
                .addGap(18, 18, 18)
                .addComponent(Employee)
                .addGap(18, 18, 18)
                .addComponent(Dashboard)
                .addGap(18, 18, 18)
                .addComponent(Monthly_Expenses)
                .addGap(18, 18, 18)
                .addComponent(Adding)
                .addGap(64, 64, 64)
                .addComponent(Logout, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(354, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 300, 900));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        tabpane1.setForeground(new java.awt.Color(102, 102, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        tabpane2.setForeground(new java.awt.Color(102, 102, 255));
        tabpane2.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        ss_txt_search.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 102, 255)));
        ss_txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ss_txt_searchKeyReleased(evt);
            }
        });

        ss_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Shop Services"
            }
        ));
        jScrollPane1.setViewportView(ss_table);

        ss_save_btn.setBackground(new java.awt.Color(102, 102, 255));
        ss_save_btn.setForeground(new java.awt.Color(255, 255, 255));
        ss_save_btn.setText("Save");
        ss_save_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ss_save_btnActionPerformed(evt);
            }
        });

        ss_delete_btn.setBackground(new java.awt.Color(102, 102, 255));
        ss_delete_btn.setForeground(new java.awt.Color(255, 255, 255));
        ss_delete_btn.setText("Delete");
        ss_delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ss_delete_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ss_txt_search, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(ss_delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ss_save_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(190, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(ss_txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ss_save_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ss_delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(157, Short.MAX_VALUE))
        );

        tabpane2.addTab("Shop Services", jPanel5);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        os_txt_search.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 102, 255)));
        os_txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                os_txt_searchKeyReleased(evt);
            }
        });

        os_save_btn.setBackground(new java.awt.Color(102, 102, 255));
        os_save_btn.setForeground(new java.awt.Color(255, 255, 255));
        os_save_btn.setText("Save");
        os_save_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                os_save_btnActionPerformed(evt);
            }
        });

        os_delete_btn.setBackground(new java.awt.Color(102, 102, 255));
        os_delete_btn.setForeground(new java.awt.Color(255, 255, 255));
        os_delete_btn.setText("Delete");
        os_delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                os_delete_btnActionPerformed(evt);
            }
        });

        os_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Ordering Services"
            }
        ));
        jScrollPane2.setViewportView(os_table);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(os_txt_search, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(os_delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(os_save_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(190, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(os_txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(os_save_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(os_delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(157, Short.MAX_VALUE))
        );

        tabpane2.addTab("Ordering Services", jPanel6);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        ose_txt_search.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 102, 255)));
        ose_txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ose_txt_searchKeyReleased(evt);
            }
        });

        ose_save_btn.setBackground(new java.awt.Color(102, 102, 255));
        ose_save_btn.setForeground(new java.awt.Color(255, 255, 255));
        ose_save_btn.setText("Save");
        ose_save_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ose_save_btnActionPerformed(evt);
            }
        });

        ose_delete_btn.setBackground(new java.awt.Color(102, 102, 255));
        ose_delete_btn.setForeground(new java.awt.Color(255, 255, 255));
        ose_delete_btn.setText("Delete");
        ose_delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ose_delete_btnActionPerformed(evt);
            }
        });

        ose_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Ordering Service Expenses"
            }
        ));
        jScrollPane3.setViewportView(ose_table);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ose_txt_search, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(ose_delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ose_save_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(190, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(ose_txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ose_save_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ose_delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(157, Short.MAX_VALUE))
        );

        tabpane2.addTab("Ordering Service Expenses", jPanel7);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabpane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabpane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabpane1.addTab("Customer Tab", jPanel2);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        met_txt_search.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 102, 255)));
        met_txt_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                met_txt_searchKeyReleased(evt);
            }
        });

        met_save_btn.setBackground(new java.awt.Color(102, 102, 255));
        met_save_btn.setForeground(new java.awt.Color(255, 255, 255));
        met_save_btn.setText("Save");
        met_save_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                met_save_btnActionPerformed(evt);
            }
        });

        met_delete_btn.setBackground(new java.awt.Color(102, 102, 255));
        met_delete_btn.setForeground(new java.awt.Color(255, 255, 255));
        met_delete_btn.setText("Delete");
        met_delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                met_delete_btnActionPerformed(evt);
            }
        });

        met_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Monthly Expenses"
            }
        ));
        jScrollPane4.setViewportView(met_table);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(271, 271, 271)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(met_txt_search, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(met_delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(met_save_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(272, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(met_txt_search, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(met_save_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(met_delete_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(154, Short.MAX_VALUE))
        );

        tabpane1.addTab("Monthly Expenses Tab", jPanel4);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabpane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabpane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 0, 1000, 650));

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CustomerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CustomerMouseEntered
        // TODO add your handling code here:
        Customer.setBackground(new Color(204,204,255));
        Customer.setOpaque(true);
    }//GEN-LAST:event_CustomerMouseEntered

    private void CustomerMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CustomerMouseExited
        // TODO add your handling code here:
        Customer.setBackground(new Color(102,102,255));
        
    }//GEN-LAST:event_CustomerMouseExited

    private void EmployeeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeMouseEntered
        // TODO add your handling code here:
        Employee.setBackground(new Color(204,204,255));
        Employee.setOpaque(true);
    }//GEN-LAST:event_EmployeeMouseEntered

    private void EmployeeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeMouseExited
        // TODO add your handling code here:
        Employee.setBackground(new Color(102,102,255));
    }//GEN-LAST:event_EmployeeMouseExited

    private void DashboardMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DashboardMouseEntered
        // TODO add your handling code here:
        Dashboard.setBackground(new Color(204,204,255));
        Dashboard.setOpaque(true);
    }//GEN-LAST:event_DashboardMouseEntered

    private void DashboardMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DashboardMouseExited
        // TODO add your handling code here:
        Dashboard.setBackground(new Color(102,102,255));
    }//GEN-LAST:event_DashboardMouseExited

    private void Monthly_ExpensesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Monthly_ExpensesMouseEntered
        // TODO add your handling code here:
        Monthly_Expenses.setBackground(new Color(204,204,255));
        Monthly_Expenses.setOpaque(true);
    }//GEN-LAST:event_Monthly_ExpensesMouseEntered

    private void Monthly_ExpensesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Monthly_ExpensesMouseExited
        // TODO add your handling code here:
        Monthly_Expenses.setBackground(new Color(102,102,255));
    }//GEN-LAST:event_Monthly_ExpensesMouseExited

    private void AddingMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddingMouseEntered
        // TODO add your handling code here:
        Adding.setBackground(new Color(204,204,255));
        Adding.setOpaque(true);
    }//GEN-LAST:event_AddingMouseEntered

    private void AddingMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddingMouseExited
        // TODO add your handling code here:
        Adding.setBackground(new Color(102,102,255));
    }//GEN-LAST:event_AddingMouseExited

    private void CustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CustomerMouseClicked
        // TODO add your handling code here:
        customer_tab o = new customer_tab();
        o.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_CustomerMouseClicked

    private void EmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeMouseClicked
        // TODO add your handling code here:
        employee_tab o = new employee_tab();
        o.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_EmployeeMouseClicked

    private void DashboardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DashboardMouseClicked
        // TODO add your handling code here:
        dashboard o = new dashboard();
        o.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_DashboardMouseClicked

    private void Monthly_ExpensesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Monthly_ExpensesMouseClicked
       
        monthly_expenses_tab o = new monthly_expenses_tab();
        o.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_Monthly_ExpensesMouseClicked

    private void AddingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddingMouseClicked
        
       
    }//GEN-LAST:event_AddingMouseClicked

    private void LogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutActionPerformed
        // TODO add your handling code here:
        signin o = new signin();
        o.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_LogoutActionPerformed

    private void ss_save_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ss_save_btnActionPerformed
        // TODO add your handling code here:
        //insertss_cattoDb();
        saveButtonClicked();
        ss_txt_search.setText("");
        setss_table();
        filterTable();
    }//GEN-LAST:event_ss_save_btnActionPerformed

    private void ss_delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ss_delete_btnActionPerformed
        // TODO add your handling code here:
        
        deletetoDB();
    }//GEN-LAST:event_ss_delete_btnActionPerformed

    private void ss_txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ss_txt_searchKeyReleased
        // TODO add your handling code here:
        filterTable();
    }//GEN-LAST:event_ss_txt_searchKeyReleased

    private void os_save_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_os_save_btnActionPerformed
        // TODO add your handling code here:
        ossaveButtonClicked();
        os_txt_search.setText("");
        setos_table();
        osfilterTable();
    }//GEN-LAST:event_os_save_btnActionPerformed

    private void os_delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_os_delete_btnActionPerformed
        // TODO add your handling code here:
        deleteosDB();
    }//GEN-LAST:event_os_delete_btnActionPerformed

    private void os_txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_os_txt_searchKeyReleased
        // TODO add your handling code here:
        
        osfilterTable();
    }//GEN-LAST:event_os_txt_searchKeyReleased

    private void ose_save_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ose_save_btnActionPerformed
        // TODO add your handling code here:
        osesaveButtonClicked();
        ose_txt_search.setText("");
        setose_table();
        osefilterTable();
    }//GEN-LAST:event_ose_save_btnActionPerformed

    private void ose_delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ose_delete_btnActionPerformed
        // TODO add your handling code here:
        deleteoseDB();
    }//GEN-LAST:event_ose_delete_btnActionPerformed

    private void ose_txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ose_txt_searchKeyReleased
        // TODO add your handling code here:
        
        osefilterTable();
    }//GEN-LAST:event_ose_txt_searchKeyReleased

    private void met_save_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_met_save_btnActionPerformed
        // TODO add your handling code here:
        metsaveButtonClicked();
        met_txt_search.setText("");
        setmet_table();
        metfilterTable();
    }//GEN-LAST:event_met_save_btnActionPerformed

    private void met_delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_met_delete_btnActionPerformed
        // TODO add your handling code here:
        deletemetDB();
    }//GEN-LAST:event_met_delete_btnActionPerformed

    private void met_txt_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_met_txt_searchKeyReleased
        // TODO add your handling code here:
        metfilterTable();
    }//GEN-LAST:event_met_txt_searchKeyReleased

    public void setss_table() {
    DefaultTableModel model = (DefaultTableModel) ss_table.getModel(); // Initialize the model outside the try-catch block
    model.setRowCount(0);
    try {
        
        Connection con = DBConnection.getConnection();
        
        // Use PreparedStatement to avoid SQL injection and bind the parameter
        String sql = "SELECT * FROM shop_service_cat";
        PreparedStatement pst = con.prepareStatement(sql);
        ResultSet rs = pst.executeQuery(); // Use PreparedStatement's executeQuery method
                    
        while (rs.next()) {
            String ssID, shopservice;

            ssID = rs.getString("service_id");
            shopservice = rs.getString("service");
            
            Object[] obj = { ssID, shopservice };
            model.addRow(obj);
        }
        
        //con.close(); // Close the connection when done
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    //Find Table Row Count
    public int tblRowCount()
    {                
        try
        { 
            Connection con = DBConnection.getConnection();

            String sql = "select MAX(service_id) AS maxService_id from shop_service_cat";
            PreparedStatement pst = con.prepareStatement(sql);
            
            ResultSet rs = pst.executeQuery();

            int maxService_id = 0;
            if (rs.next()) {
                maxService_id = rs.getInt("maxService_id");
            }
            return (maxService_id+1);
        }
        catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }    
        return -1;
    }    
    
    
    public void insertss_cattoDb()
    {
        int sid = tblRowCount();       
        String ss = ss_txt_search.getText();
        
        try
        {
            Connection con = DBConnection.getConnection();
            
            String sql = "insert into shop_service_cat (service_id,service) values(?,?)";
            PreparedStatement pst = con.prepareStatement(sql);
            
            pst.setInt(1,sid);
            pst.setString(2,ss);
            
            
                    
            int updateRowCount = pst.executeUpdate();
            
            if(updateRowCount>0)
            {
                JOptionPane.showMessageDialog(this, "shop services saved");
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    public void deletetoDB() {
                
                int selectedRow = ss_table.getSelectedRow();

                if (selectedRow != -1) { 
                    int ssId = Integer.parseInt(ss_table.getValueAt(selectedRow, 0).toString());

                    try {
                        // Establish a database connection
                        Connection con = DBConnection.getConnection();

                        // Create a DELETE SQL statement
                        String deleteQuery = "DELETE FROM shop_service_cat WHERE service_id = ?";

                        // Prepare the statement
                        PreparedStatement preparedStatement = con.prepareStatement(deleteQuery);
                        preparedStatement.setInt(1, ssId);

                        // Execute the DELETE statement
                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            // Remove the selected row from the JTable
                            DefaultTableModel model = (DefaultTableModel) ss_table.getModel();
                            model.removeRow(selectedRow);
                        } else {
                            JOptionPane.showMessageDialog(null, "Error deleting the record.", "Error", JOptionPane.ERROR_MESSAGE);
                        }

                        // Close the database connection
                        
                    } catch(Exception e)
                    {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }     
                } 
            }
    private void filterTable() {
    DefaultTableModel model = (DefaultTableModel) ss_table.getModel();
    TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);
    ss_table.setRowSorter(tr);

    String filterText = ss_txt_search.getText().replaceAll("\\s+", "");

    tr.setRowFilter(new RowFilter<DefaultTableModel, Integer>() {
        @Override
        public boolean include(Entry<? extends DefaultTableModel, ? extends Integer> entry) {
            if (filterText.isEmpty()) {
                return true; // Show all rows when the filter text is empty
            }

            DefaultTableModel model = entry.getModel();
            int columnCount = model.getColumnCount();

            for (int i = 0; i < columnCount; i++) {
                Object value = entry.getValue(i);
                if (value != null) {
                    String cellText = value.toString().replaceAll("\\s+", ""); // Remove spaces
                    if (cellText.toLowerCase().contains(filterText.toLowerCase())) {
                        return true;
                    }
                }
            }

            return false; // No match found
        }
    });
}

    
    private boolean isDuplicateValue(String inputValue) {
DefaultTableModel tableModel = (DefaultTableModel) ss_table.getModel();
        int rowCount = tableModel.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            String cellValue = tableModel.getValueAt(i, 1).toString().trim();

            // Compare the input value with the cell value (case-insensitive)
            if (inputValue.equalsIgnoreCase(cellValue)) {
                return true; // Duplicate found
            }
        }

        return false; // No duplicates found
    }

    private void saveButtonClicked() {
        
        String userInput = ss_txt_search.getText().trim();

        if (userInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter data.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isDuplicateValue(userInput)) {
            JOptionPane.showMessageDialog(this, "Duplicate value found.", "Duplicate Record", JOptionPane.WARNING_MESSAGE);
        } else {
            // Add the data to the JTable
            insertss_cattoDb();
            // Clear the input field
        }
    }
    
    
    //-------------------------------------------------Ordering sercive -------------------------------------------
    
    public void setos_table() {
    DefaultTableModel model = (DefaultTableModel) os_table.getModel(); // Initialize the model outside the try-catch block
    model.setRowCount(0);
    try {
        
        Connection con = DBConnection.getConnection();
        
        // Use PreparedStatement to avoid SQL injection and bind the parameter
        String sql = "SELECT * FROM ordering_service_cat";
        PreparedStatement pst = con.prepareStatement(sql);
        ResultSet rs = pst.executeQuery(); // Use PreparedStatement's executeQuery method
                    
        while (rs.next()) {
            String osID, orderingservice;

            osID = rs.getString("service_id");
            orderingservice = rs.getString("service");
            
            Object[] obj = { osID, orderingservice };
            model.addRow(obj);
        }
        
        //con.close(); // Close the connection when done
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    //Find Table Row Count
    public int ostblRowCount()
    {                
        try
        { 
            Connection con = DBConnection.getConnection();

            String sql = "select MAX(service_id) AS maxService_id from ordering_service_cat";
            PreparedStatement pst = con.prepareStatement(sql);
            
            ResultSet rs = pst.executeQuery();

            int maxService_id = 0;
            if (rs.next()) {
                maxService_id = rs.getInt("maxService_id");
            }
            return (maxService_id+1);
        }
        catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }    
        return -1;
    }    
    
    
    public void insertos_cattoDb()
    {
        int oid = ostblRowCount();       
        String os = os_txt_search.getText();
        
        try
        {
            Connection con = DBConnection.getConnection();
            
            String sql = "insert into ordering_service_cat (service_id,service) values(?,?)";
            PreparedStatement pst = con.prepareStatement(sql);
            
            pst.setInt(1,oid);
            pst.setString(2,os);
            
            
                    
            int updateRowCount = pst.executeUpdate();
            
            if(updateRowCount>0)
            {
                JOptionPane.showMessageDialog(this, "ordering services saved");
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    public void deleteosDB() {
                
                int selectedRow = os_table.getSelectedRow();

                if (selectedRow != -1) { 
                    int osId = Integer.parseInt(os_table.getValueAt(selectedRow, 0).toString());

                    try {
                        // Establish a database connection
                        Connection con = DBConnection.getConnection();

                        // Create a DELETE SQL statement
                        String deleteQuery = "DELETE FROM ordering_service_cat WHERE service_id = ?";

                        // Prepare the statement
                        PreparedStatement preparedStatement = con.prepareStatement(deleteQuery);
                        preparedStatement.setInt(1, osId);

                        // Execute the DELETE statement
                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            // Remove the selected row from the JTable
                            DefaultTableModel model = (DefaultTableModel) os_table.getModel();
                            model.removeRow(selectedRow);
                        } else {
                            JOptionPane.showMessageDialog(null, "Error deleting the record.", "Error", JOptionPane.ERROR_MESSAGE);
                        }

                        // Close the database connection
                        
                    } catch(Exception e)
                    {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }     
                } 
            }
    private void osfilterTable() {
    DefaultTableModel model = (DefaultTableModel) os_table.getModel();
    TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);
    os_table.setRowSorter(tr);

    String filterText = os_txt_search.getText().replaceAll("\\s+", "");

    tr.setRowFilter(new RowFilter<DefaultTableModel, Integer>() {
        @Override
        public boolean include(Entry<? extends DefaultTableModel, ? extends Integer> entry) {
            if (filterText.isEmpty()) {
                return true; // Show all rows when the filter text is empty
            }

            DefaultTableModel model = entry.getModel();
            int columnCount = model.getColumnCount();

            for (int i = 0; i < columnCount; i++) {
                Object value = entry.getValue(i);
                if (value != null) {
                    String cellText = value.toString().replaceAll("\\s+", ""); // Remove spaces
                    if (cellText.toLowerCase().contains(filterText.toLowerCase())) {
                        return true;
                    }
                }
            }

            return false; // No match found
        }
    });
}

    
    private boolean osisDuplicateValue(String inputValue) {
DefaultTableModel tableModel = (DefaultTableModel) os_table.getModel();
        int rowCount = tableModel.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            String cellValue = tableModel.getValueAt(i, 1).toString().trim();

            // Compare the input value with the cell value (case-insensitive)
            if (inputValue.equalsIgnoreCase(cellValue)) {
                return true; // Duplicate found
            }
        }

        return false; // No duplicates found
    }

    private void ossaveButtonClicked() {
        
        String userInput = os_txt_search.getText().trim();

        if (userInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter data.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (osisDuplicateValue(userInput)) {
            JOptionPane.showMessageDialog(this, "Duplicate value found.", "Duplicate Record", JOptionPane.WARNING_MESSAGE);
        } else {
            // Add the data to the JTable
            insertos_cattoDb();
            // Clear the input field
        }
    }
    
    //--------------------------------- ordering service expense ---------------------------------
    
    public void setose_table() {
    DefaultTableModel model = (DefaultTableModel) ose_table.getModel(); // Initialize the model outside the try-catch block
    model.setRowCount(0);
    try {
        
        Connection con = DBConnection.getConnection();
        
        // Use PreparedStatement to avoid SQL injection and bind the parameter
        String sql = "SELECT * FROM ordering_service_expense_cat";
        PreparedStatement pst = con.prepareStatement(sql);
        ResultSet rs = pst.executeQuery(); // Use PreparedStatement's executeQuery method
                    
        while (rs.next()) {
            String oseID, orderingserviceexpense;

            oseID = rs.getString("expense_id");
            orderingserviceexpense = rs.getString("expense");
            
            Object[] obj = { oseID, orderingserviceexpense };
            model.addRow(obj);
        }
        
        //con.close(); // Close the connection when done
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    //Find Table Row Count
    public int osetblRowCount()
    {                
        try
        { 
            Connection con = DBConnection.getConnection();

            String sql = "select MAX(expense_id) AS maxExpense_id from ordering_service_expense_cat";
            PreparedStatement pst = con.prepareStatement(sql);
            
            ResultSet rs = pst.executeQuery();

            int maxService_id = 0;
            if (rs.next()) {
                maxService_id = rs.getInt("maxExpense_id");
            }
            return (maxService_id+1);
        }
        catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }    
        return -1;
    }    
    
    
    public void insertose_cattoDb()
    {
        int oid = osetblRowCount();       
        String ose = ose_txt_search.getText();
        
        try
        {
            Connection con = DBConnection.getConnection();
            
            String sql = "insert into ordering_service_expense_cat (expense_id,expense) values(?,?)";
            PreparedStatement pst = con.prepareStatement(sql);
            
            pst.setInt(1,oid);
            pst.setString(2,ose);
            
            
                    
            int updateRowCount = pst.executeUpdate();
            
            if(updateRowCount>0)
            {
                JOptionPane.showMessageDialog(this, "ordering service Expenses saved");
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    public void deleteoseDB() {
                
                int selectedRow = ose_table.getSelectedRow();

                if (selectedRow != -1) { 
                    int oseId = Integer.parseInt(ose_table.getValueAt(selectedRow, 0).toString());

                    try {
                        // Establish a database connection
                        Connection con = DBConnection.getConnection();

                        // Create a DELETE SQL statement
                        String deleteQuery = "DELETE FROM ordering_service_expense_cat WHERE expense_id = ?";

                        // Prepare the statement
                        PreparedStatement preparedStatement = con.prepareStatement(deleteQuery);
                        preparedStatement.setInt(1, oseId);

                        // Execute the DELETE statement
                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            // Remove the selected row from the JTable
                            DefaultTableModel model = (DefaultTableModel) ose_table.getModel();
                            model.removeRow(selectedRow);
                        } else {
                            JOptionPane.showMessageDialog(null, "Error deleting the record.", "Error", JOptionPane.ERROR_MESSAGE);
                        }

                        // Close the database connection
                        
                    } catch(Exception e)
                    {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }     
                } 
            }
    private void osefilterTable() {
    DefaultTableModel model = (DefaultTableModel) ose_table.getModel();
    TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);
    ose_table.setRowSorter(tr);

    String filterText = ose_txt_search.getText().replaceAll("\\s+", "");

    tr.setRowFilter(new RowFilter<DefaultTableModel, Integer>() {
        @Override
        public boolean include(Entry<? extends DefaultTableModel, ? extends Integer> entry) {
            if (filterText.isEmpty()) {
                return true; // Show all rows when the filter text is empty
            }

            DefaultTableModel model = entry.getModel();
            int columnCount = model.getColumnCount();

            for (int i = 0; i < columnCount; i++) {
                Object value = entry.getValue(i);
                if (value != null) {
                    String cellText = value.toString().replaceAll("\\s+", ""); // Remove spaces
                    if (cellText.toLowerCase().contains(filterText.toLowerCase())) {
                        return true;
                    }
                }
            }

            return false; // No match found
        }
    });
}

    
    private boolean oseisDuplicateValue(String inputValue) {
DefaultTableModel tableModel = (DefaultTableModel) ose_table.getModel();
        int rowCount = tableModel.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            String cellValue = tableModel.getValueAt(i, 1).toString().trim();

            // Compare the input value with the cell value (case-insensitive)
            if (inputValue.equalsIgnoreCase(cellValue)) {
                return true; // Duplicate found
            }
        }

        return false; // No duplicates found
    }

    private void osesaveButtonClicked() {
        
        String userInput = ose_txt_search.getText().trim();

        if (userInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter data.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (oseisDuplicateValue(userInput)) {
            JOptionPane.showMessageDialog(this, "Duplicate value found.", "Duplicate Record", JOptionPane.WARNING_MESSAGE);
        } else {
            // Add the data to the JTable
            insertose_cattoDb();
            // Clear the input field
        }
    }
    
    //-------------------------------- monthly expense cat -----------------------
    
    public void setmet_table() {
    DefaultTableModel model = (DefaultTableModel) met_table.getModel(); // Initialize the model outside the try-catch block
    model.setRowCount(0);
    try {
        
        Connection con = DBConnection.getConnection();
        
        // Use PreparedStatement to avoid SQL injection and bind the parameter
        String sql = "SELECT * FROM monthly_expense_cat";
        PreparedStatement pst = con.prepareStatement(sql);
        ResultSet rs = pst.executeQuery(); // Use PreparedStatement's executeQuery method
                    
        while (rs.next()) {
            String ssID, orderingservice;

            ssID = rs.getString("expense_id");
            orderingservice = rs.getString("expense");
            
            Object[] obj = { ssID, orderingservice };
            model.addRow(obj);
        }
        
        //con.close(); // Close the connection when done
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    //Find Table Row Count
    public int mettblRowCount()
    {                
        try
        { 
            Connection con = DBConnection.getConnection();

            String sql = "select MAX(expense_id) AS maxExpense_id from monthly_expense_cat";
            PreparedStatement pst = con.prepareStatement(sql);
            
            ResultSet rs = pst.executeQuery();

            int maxService_id = 0;
            if (rs.next()) {
                maxService_id = rs.getInt("maxExpense_id");
            }
            return (maxService_id+1);
        }
        catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }    
        return -1;
    }    
    
    
    public void insertmet_cattoDb()
    {
        int oid = mettblRowCount();       
        String met = met_txt_search.getText();
        
        try
        {
            Connection con = DBConnection.getConnection();
            
            String sql = "insert into monthly_expense_cat (expense_id,expense) values(?,?)";
            PreparedStatement pst = con.prepareStatement(sql);
            
            pst.setInt(1,oid);
            pst.setString(2,met);
            
            
                    
            int updateRowCount = pst.executeUpdate();
            
            if(updateRowCount>0)
            {
                JOptionPane.showMessageDialog(this, "Monthly Expenses saved");
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    public void deletemetDB() {
                
                int selectedRow = met_table.getSelectedRow();

                if (selectedRow != -1) { 
                    int metId = Integer.parseInt(met_table.getValueAt(selectedRow, 0).toString());

                    try {
                        // Establish a database connection
                        Connection con = DBConnection.getConnection();

                        // Create a DELETE SQL statement
                        String deleteQuery = "DELETE FROM monthly_expense_cat WHERE expense_id = ?";

                        // Prepare the statement
                        PreparedStatement preparedStatement = con.prepareStatement(deleteQuery);
                        preparedStatement.setInt(1, metId);

                        // Execute the DELETE statement
                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            // Remove the selected row from the JTable
                            DefaultTableModel model = (DefaultTableModel) met_table.getModel();
                            model.removeRow(selectedRow);
                        } else {
                            JOptionPane.showMessageDialog(null, "Error deleting the record.", "Error", JOptionPane.ERROR_MESSAGE);
                        }

                        // Close the database connection
                        
                    } catch(Exception e)
                    {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "Error inserting records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    }     
                } 
            }
    private void metfilterTable() {
    DefaultTableModel model = (DefaultTableModel) met_table.getModel();
    TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);
    met_table.setRowSorter(tr);

    String filterText = met_txt_search.getText().replaceAll("\\s+", "");

    tr.setRowFilter(new RowFilter<DefaultTableModel, Integer>() {
        @Override
        public boolean include(Entry<? extends DefaultTableModel, ? extends Integer> entry) {
            if (filterText.isEmpty()) {
                return true; // Show all rows when the filter text is empty
            }

            DefaultTableModel model = entry.getModel();
            int columnCount = model.getColumnCount();

            for (int i = 0; i < columnCount; i++) {
                Object value = entry.getValue(i);
                if (value != null) {
                    String cellText = value.toString().replaceAll("\\s+", ""); // Remove spaces
                    if (cellText.toLowerCase().contains(filterText.toLowerCase())) {
                        return true;
                    }
                }
            }

            return false; // No match found
        }
    });
}

    
    private boolean metisDuplicateValue(String inputValue) {
DefaultTableModel tableModel = (DefaultTableModel) met_table.getModel();
        int rowCount = tableModel.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            String cellValue = tableModel.getValueAt(i, 1).toString().trim();

            // Compare the input value with the cell value (case-insensitive)
            if (inputValue.equalsIgnoreCase(cellValue)) {
                return true; // Duplicate found
            }
        }

        return false; // No duplicates found
    }

    private void metsaveButtonClicked() {
        
        String userInput = met_txt_search.getText().trim();

        if (userInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter data.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (metisDuplicateValue(userInput)) {
            JOptionPane.showMessageDialog(this, "Duplicate value found.", "Duplicate Record", JOptionPane.WARNING_MESSAGE);
        } else {
            // Add the data to the JTable
            insertmet_cattoDb();
            // Clear the input field
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adding_tab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adding_tab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adding_tab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adding_tab.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adding_tab().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Adding;
    private javax.swing.JLabel Customer;
    private javax.swing.JLabel Dashboard;
    private javax.swing.JLabel Employee;
    private javax.swing.JButton Logout;
    private javax.swing.JLabel Monthly_Expenses;
    private rojerusan.RSFotoCircle Profile;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton met_delete_btn;
    private javax.swing.JButton met_save_btn;
    private javax.swing.JTable met_table;
    private javax.swing.JTextField met_txt_search;
    private javax.swing.JButton os_delete_btn;
    private javax.swing.JButton os_save_btn;
    private javax.swing.JTable os_table;
    private javax.swing.JTextField os_txt_search;
    private javax.swing.JButton ose_delete_btn;
    private javax.swing.JButton ose_save_btn;
    private javax.swing.JTable ose_table;
    private javax.swing.JTextField ose_txt_search;
    private javax.swing.JButton ss_delete_btn;
    private javax.swing.JButton ss_save_btn;
    private javax.swing.JTable ss_table;
    private javax.swing.JTextField ss_txt_search;
    private bizbuilder.Tabpane tabpane1;
    private bizbuilder.Tabpane tabpane2;
    // End of variables declaration//GEN-END:variables
}
