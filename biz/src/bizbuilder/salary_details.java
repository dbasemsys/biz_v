/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bizbuilder;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.RowFilter.ComparisonType;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author THANATOS
 */
public class salary_details extends javax.swing.JFrame {
    
    
    /**
     * Creates new form salary_details
     */
    public salary_details() {
        initComponents();
        populateComboBox();
        setSalaryDetails();
        setupComboBoxes();
        populatesd_year();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sd_details_table = new javax.swing.JTable();
        sd_emid = new rojerusan.RSComboMetro();
        sd_month = new rojerusan.RSComboMetro();
        jButton1 = new javax.swing.JButton();
        sd_year = new rojerusan.RSComboMetro();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        sd_details_table.setAutoCreateRowSorter(true);
        sd_details_table.setForeground(new java.awt.Color(102, 102, 255));
        sd_details_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Salary Month", "Credited Date", "Monthly Salary", "EPF", "Payable Salary"
            }
        ));
        sd_details_table.setGridColor(new java.awt.Color(102, 102, 255));
        jScrollPane1.setViewportView(sd_details_table);
        if (sd_details_table.getColumnModel().getColumnCount() > 0) {
            sd_details_table.getColumnModel().getColumn(0).setMinWidth(150);
            sd_details_table.getColumnModel().getColumn(1).setMinWidth(150);
            sd_details_table.getColumnModel().getColumn(2).setMinWidth(150);
            sd_details_table.getColumnModel().getColumn(3).setMinWidth(150);
            sd_details_table.getColumnModel().getColumn(4).setMinWidth(150);
            sd_details_table.getColumnModel().getColumn(5).setMinWidth(150);
        }

        sd_emid.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select ..." }));
        sd_emid.setColorBorde(new java.awt.Color(102, 102, 255));
        sd_emid.setColorFondo(new java.awt.Color(102, 102, 255));
        sd_emid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sd_emidMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                sd_emidMouseEntered(evt);
            }
        });
        sd_emid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sd_emidActionPerformed(evt);
            }
        });

        sd_month.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select ...", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        sd_month.setColorBorde(new java.awt.Color(102, 102, 255));
        sd_month.setColorFondo(new java.awt.Color(102, 102, 255));
        sd_month.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sd_monthMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                sd_monthMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sd_monthMousePressed(evt);
            }
        });
        sd_month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sd_monthActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 102, 255));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Clear Filter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        sd_year.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select ..." }));
        sd_year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sd_yearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 905, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sd_emid, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(sd_month, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(sd_year, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sd_month, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sd_emid, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sd_year, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(377, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sd_emidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sd_emidActionPerformed
        
    }//GEN-LAST:event_sd_emidActionPerformed

    private void sd_monthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sd_monthActionPerformed
        
    }//GEN-LAST:event_sd_monthActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        sd_emid.setSelectedIndex(0);
        sd_month.setSelectedIndex(0); // Clears the selection
        sd_year.setSelectedIndex(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void sd_emidMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sd_emidMouseEntered
        // TODO add your handling code here:
    
    }//GEN-LAST:event_sd_emidMouseEntered

    private void sd_monthMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sd_monthMouseEntered
        // TODO add your handling code here:
        
    }//GEN-LAST:event_sd_monthMouseEntered

    private void sd_monthMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sd_monthMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_sd_monthMouseClicked

    private void sd_emidMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sd_emidMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_sd_emidMouseClicked

    private void sd_monthMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sd_monthMousePressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_sd_monthMousePressed

    private void sd_yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sd_yearActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_sd_yearActionPerformed

    /**
     * @param args the command line arguments
     */
    private void populatesd_year(){
    ArrayList<String> values = new ArrayList<>();
    for (int i = 2023; i <= 2123; i++) {
    values.add(""+i);
    }
    for (String value : values) {
    sd_year.addItem(value);
    }

    }
    
    private void populateComboBox() {
       String sql = "SELECT * FROM employee";
    try {
        Connection con = DBConnection.getConnection();

        
        PreparedStatement pst = con.prepareStatement(sql);

        ResultSet rs = pst.executeQuery();
        while (rs.next()) {
            sd_emid.addItem(rs.getString("employee_id"));
        }
        
        
    } catch (Exception e) {
        
    }
}
    
    
 
public void setSalaryDetails() {
    DefaultTableModel model = (DefaultTableModel) sd_details_table.getModel(); // Initialize the model outside the try-catch block
    model.setRowCount(0);
    try {
        
        Connection con = DBConnection.getConnection();
        
        // Use PreparedStatement to avoid SQL injection and bind the parameter
        String sql = "SELECT * FROM salary";
        PreparedStatement pst = con.prepareStatement(sql);
        ResultSet rs = pst.executeQuery(); // Use PreparedStatement's executeQuery method
                    
        while (rs.next()) {
            String employeeID, salaryMonth, salaryDate, monthlySalary, epf, payablesalary;

            employeeID = rs.getString("employee_id");
            salaryMonth = rs.getString("salary_month");
            salaryDate = rs.getString("credited_date");
            monthlySalary = rs.getString("salary");
            epf = rs.getString("epf");
            payablesalary = rs.getString("payable_salary");

            Object[] obj = { employeeID, salaryMonth, salaryDate, monthlySalary, epf, payablesalary };
            model.addRow(obj);
        }
        
        //con.close(); // Close the connection when done
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving records: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}







private void applyFilters(String emidQuery, String monthQuery, String yearQuery) {
    DefaultTableModel model = (DefaultTableModel) sd_details_table.getModel();
    TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(model);
    sd_details_table.setRowSorter(tr);

    RowFilter<DefaultTableModel, Object> emidFilter = null;
    RowFilter<DefaultTableModel, Object> monthFilter = null;
    RowFilter<DefaultTableModel, Object> yearFilter = null;
    
    if (!"Select ...".equals(emidQuery)) {
        emidFilter = new RowFilter<DefaultTableModel, Object>() {
            @Override
            public boolean include(Entry<? extends DefaultTableModel, ? extends Object> entry) {
                String employeeID = entry.getStringValue(0); // Assuming Employee ID is in the first column
                try {
                    int id = Integer.parseInt(employeeID); // Convert to integer
                    int filterValue = Integer.parseInt(emidQuery);
                    return id == filterValue;
                } catch (NumberFormatException e) {
                    // Handle conversion errors here if necessary
                    return false;
                }
            }
        };
    }
    
    if (!"Select ...".equals(monthQuery)) {
        monthFilter = RowFilter.regexFilter(monthQuery);
    }

    if (!"Select ...".equals(yearQuery)) {
        yearFilter = new RowFilter<DefaultTableModel, Object>() {
            @Override
            public boolean include(RowFilter.Entry<? extends DefaultTableModel, ? extends Object> entry) {
                String dateString = entry.getStringValue(2); // Assuming date is in the third column
                try {
                    // Parse the date using SimpleDateFormat
                    SimpleDateFormat dateFormat = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                    Date date = dateFormat.parse(dateString);

                    // Extract the year from the parsed date
                    SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy");
                    int year = Integer.parseInt(yearFormat.format(date)); // Convert to integer

                    int filterValue = Integer.parseInt(yearQuery);
                    return year == filterValue; // Compare the extracted year to the yearQuery
                } catch (ParseException | NumberFormatException e) {
                    // Handle parsing and conversion errors here if necessary
                    return false;
                }
            }
        };
    }

    if (emidFilter != null || monthFilter != null || yearFilter != null) {
        // Combine filters using RowFilter.andFilter
        List<RowFilter<DefaultTableModel, Object>> filters = new ArrayList<>();
        if (emidFilter != null) filters.add(emidFilter);
        if (monthFilter != null) filters.add(monthFilter);
        if (yearFilter != null) filters.add(yearFilter);
        
        tr.setRowFilter(RowFilter.andFilter(filters));
    } else {
        // If no filters are applied, show all rows
        tr.setRowFilter(null);
    }
}


private void setupComboBoxes() {
    // Set up ActionListener for emidComboBox
    sd_emid.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Get the selected item from emidComboBox
            String emidQuery = sd_emid.getSelectedItem().toString();
            
            // Get the selected item from monthComboBox
            String monthQuery = sd_month.getSelectedItem().toString();
            
            String yearQuery = sd_year.getSelectedItem().toString();
            
            // Apply the filters with the selected values from both combo boxes
            applyFilters(emidQuery, monthQuery,yearQuery);
        }
    });
    
    // Set up ActionListener for monthComboBox
    sd_month.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Get the selected item from emidComboBox
            String emidQuery = sd_emid.getSelectedItem().toString();
            
            // Get the selected item from monthComboBox
            String monthQuery = sd_month.getSelectedItem().toString();
            String yearQuery = sd_year.getSelectedItem().toString();
            
            // Apply the filters with the selected values from both combo boxes
            applyFilters(emidQuery, monthQuery,yearQuery);
        }
    });
    
sd_year.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Get the selected item from emidComboBox
            String emidQuery = sd_emid.getSelectedItem().toString();
            
            // Get the selected item from monthComboBox
            String monthQuery = sd_month.getSelectedItem().toString();
            String yearQuery = sd_year.getSelectedItem().toString();
            
            // Apply the filters with the selected values from both combo boxes
            applyFilters(emidQuery, monthQuery,yearQuery);
        }
    });

}


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(salary_details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(salary_details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(salary_details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(salary_details.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new salary_details().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable sd_details_table;
    private rojerusan.RSComboMetro sd_emid;
    private rojerusan.RSComboMetro sd_month;
    private rojerusan.RSComboMetro sd_year;
    // End of variables declaration//GEN-END:variables
}
